
API Reference Document
Search...
std::basic_regex
 C++ 正则表达式库 std::basic_regex 
定义于头文件 <regex>
template <
    class CharT,
    class Traits = std::regex_traits<CharT>
> class basic_regex;
(C++11 起)
类模板 basic_regex 提供保有正则表达式的通用框架。

提供对于常见类型的几个特化：

定义于头文件 <regex>
 
类型	定义
regex	basic_regex<char>
wregex	basic_regex<wchar_t>
成员类型
 
成员类型	定义
value_type	CharT
traits_type	Traits
string_type	Traits::string_type
locale_type	Traits::locale_type
flag_type	std::regex_constants::syntax_option_type
成员函数
(构造函数)
 
构造 regex 对象
(公开成员函数)
(析构函数)
 
析构 regex 对象
(公开成员函数)
operator=
 
赋值内容
(公开成员函数)
assign
 
赋值内容
(公开成员函数)
观察器
mark_count
 
返回正则表达式中有标记的子表达式数量
(公开成员函数)
flags
 
返回语法标志
(公开成员函数)
本地环境
getloc
 
获取本地环境信息
(公开成员函数)
imbue
 
设置本地环境信息
(公开成员函数)
修改器
swap
 
交换内容
(公开成员函数)
常量
 
值	效果
icase	应当以不考虑大小写进行字符匹配。
nosubs	进行匹配时，将所有被标记的子表达式 (expr) 当做非标记的子表达式 (?:expr) 。不将匹配存储于提供的 std::regex_match 结构中，且 mark_count() 为零
optimize	指示正则表达式引擎进行更快的匹配，带有令构造变慢的潜在开销。例如这可能表示将非确定 FSA 转换为确定 FSA 。
collate	形如 "[a-b]" 的字符范围将对本地环境敏感。
multiline (C++17)	若选择 ECMAScript 引擎，则指定 ^ 应该匹配行首，而 $ 应该匹配行尾。
ECMAScript	使用改 ECMAScript 正则表达式文法
basic	使用基本 POSIX 正则表达式文法（文法文档）。
extended	使用扩展 POSIX 正则表达式文法（文法文档）。
awk	使用 POSIX 中 awk 工具所用的正则表达式文法（文法文档）。
grep	使用 POSIX 中 grep 工具所用的正则表达式文法。这等效于 basic 选项附带作为另一种分隔符的换行符 '\n' 。
egrep	使用 POSIX 中 grep 工具带 -E 选项所用的正则表达式文法。这等效于 extended 附带 '|' 之外的作为另一种分隔符的换行符 '\n' 。
ECMAScript, basic, extended, awk, grep, egrep 必须选取至多一个文法选项。若不选取文法选项，则设定为选取 ECMAScript 。其他选项作为修饰符工作，从而 std::regex("meow", std::regex::icase) 等价于 std::regex("meow", std::regex::ECMAScript|std::regex::icase)

basic_regex 中的成员常量是定义于命名空间 std::regex_constants 的 syntax_option_type 常量的副本。

非成员函数
std::swap(std::basic_regex)
  
(C++11)
 
特化 std::swap 算法
(函数模板)
推导指引(C++17 起)


序号	函数 & 描述
1	char *asctime(const struct tm *timeptr)
返回一个指向字符串的指针，它代表了结构 timeptr 的日期和时间。
2	clock_t clock(void)
返回程序执行起（一般为程序的开头），处理器时钟所使用的时间。
3	char *ctime(const time_t *timer)
返回一个表示当地时间的字符串，当地时间是基于参数 timer。
4	double difftime(time_t time1, time_t time2)
返回 time1 和 time2 之间相差的秒数 (time1-time2)。
5	struct tm *gmtime(const time_t *timer)
timer 的值被分解为 tm 结构，并用协调世界时（UTC）也被称为格林尼治标准时间（GMT）表示。
6	struct tm *localtime(const time_t *timer)
timer 的值被分解为 tm 结构，并用本地时区表示。
7	time_t mktime(struct tm *timeptr)
把 timeptr 所指向的结构转换为一个依据本地时区的 time_t 值。
8	size_t strftime(char *str, size_t maxsize, const char *format, const struct tm *timeptr)
根据 format 中定义的格式化规则，格式化结构 timeptr 表示的时间，并把它存储在 str 中。
9	time_t time(time_t *timer)
计算当前日历时间，并把它编码成 time_t 格式。